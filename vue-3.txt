https://cli.vuejs.org/zh/guide/

1 安装nodejs
yum install nod

2 
// use npm
npm i nrm -g
查看可用的npm源

nrm ls

nrm use taobao
// 切换之后可用 nrm ls查看是否已经切换了npm源

npm i yarn -g


3 安装vue工具包
npm uninstall -g vue-cli
npm install -g @vue/cli

4 创建项目（cmd到自己项目想产生的位置）
vue create xxx （xxx为项目名）；

5 进入到项目根目录：添加iview依赖
npm install iview  --save

6 进入到项目根目录：启动项目
npm run serve

7 打包
npm run build


=======================
// 进入到vue-test项目
cd vue-test
// - 启动服务
yarn serve
// - 打包编译
yarn build
// - 执行lint
yarn lint
// - 执行单元测试
yarn test:unit

module.exports = {
  devServer: {
    proxy: {
     '/hrm/api': {
        //target: 'http://192.168.1.209:10751/', // Dev环境
        //  target: 'http://192.168.1.238:10751/', // Test环境
        // target: 'http://192.168.1.215:10751/', // Rls环境
        target: 'http://192.168.1.218:10751/', // 正式环境
        changeOrigin: true,
        autoRewrite: true,
        cookieDomainRewrite: true,
        pathRewrite: {
          '^/hrm/api/': '/'
        }
      }
    }
  }
}

vi nginx.conf

server {
	location / {
		root /software/dist;
		index index.html index.html;
	}
/usr/local/nginx/sbin/nginx -s reload


npm upgrade -g core-js@^3

npm update常用命令使用
一、更新

npm-check检查更新
npm install -g npm-check
npm-check
2.npm-upgrade更新
npm install -g npm-upgrade
npm-upgrade

3.更新全局包：
npm update <name> -g

4.更新生产环境依赖包：
npm update <name> --save

5.更新开发环境依赖包：
npm update <name> --save-dev


安装sinopia

npm install -g sinopia

安装成功之后，修改npm路径为本地，

npm set registry http://localhost:4873/
 

$ npm set ca null

如果使用HTTPS，请添加适当的CA信息，（“null”表示从操作系统获取CA列表）

添加新用户

npm adduser --registry http：// localhost：4873 /


sudo npm cache verify

解决方案 由于 npm 5 使用了新的包管理模式，所以在升级之后，请先清空一下本地缓存：

npm cache clean --force 。
如果上边没办法解决问题，可以尝试下边的指令：

npm cache clear --force && npm install --no-shrinkwrap --update-binary

yarn global add  @vue/cli

yarn global add  sinopia
yarn global add  pm2


npm 与 yarn 命令对比
npm	yarn
npm install	yarn install
(N/A)	yarn install --flat
(N/A)	yarn install --har
(N/A)	yarn install --no-lockfile
(N/A)	yarn install --pure-lockfile
npm install [package]	(N/A)
npm install --save [package]	yarn add [package]
npm install --save-dev [package]	yarn add [package] [--dev/-D]
(N/A)	yarn add [package] [--peer/-P]
npm install --save-optional [package]	yarn add [package] [--optional/-O]
npm install --save-exact [package]	yarn add [package] [--exact/-E]
(N/A)	yarn add [package] [--tilde/-T]
npm install --global [package]	yarn global add [package]
npm rebuild	yarn install --force
npm uninstall [package]	(N/A)
npm uninstall --save [package]	yarn remove [package]
npm uninstall --save-dev [package]	yarn remove [package]
npm uninstall --save-optional [package]	yarn remove [package]
npm cache clean	yarn cache clean
rm -rf node_modules && npm install	yarn upgrade


yarn add  iview
yarn add  serve

[root@dns demo]# more src/main.js 
import Vue from 'vue'
import App from './App.vue'

import iView from 'iview'
import 'iview/dist/styles/iview.css'

Vue.config.productionTip = false

Vue.use(iView)

vue add router 

yarn serve

vue ui

yarn build

===================
Set correct publicPath in vue.config.js.

If you are deploying to https://<USERNAME>.github.io/, you can omit publicPath as it defaults to "/".

If you are deploying to https://<USERNAME>.github.io/<REPO>/, (i.e. your repository is at https://github.com/<USERNAME>/<REPO>), set publicPath to "/<REPO>/". For example, if your repo name is "my-project", your vue.config.js should look like this:

module.exports = {
  publicPath: process.env.NODE_ENV === 'production'
    ? '/my-project/'
    : '/'
}

nginx.conf
user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  1024;
}
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  keepalive_timeout  65;
  server {
    listen       80;
    server_name  localhost;
    location / {
      root   /app; ### 根据这里定位静态文件
      index  index.html;
      try_files $uri $uri/ /index.html;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}

https://cli.vuejs.org/guide/deployment.html#docker-nginx

node的测试web服务器
/app/sample/node_modules/.bin/serve  -s dist



private:npm仓库名称
nrm add private http://192.168.152.128:4873
nrm use private

添加用户的ip,可能是用户识别的一部分
npm adduser --registry http://localhost:4873/
nrm add local http://localhost:4873/
nrm use local

npm login

npm publish
npm unpublish --force

/root/.config/sinopia/config.yaml
config.yaml文件是sinopia的配置文件
storage: ./storage  //npm包存放的路径

auth:
  htpasswd:
    file: ./htpasswd   //保存用户的账号密码等信息
    max_users: -1  //默认为1000，改为-1，禁止注册

uplinks:
  npmjs:
    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，修改 url 让sinopia使用 淘宝的npm镜像地址
    
packages:  //配置权限管理
  '@*/*':
    access: $all
    publish: $authenticated

  '*':
    access: $all

    publish: $authenticated

    proxy: npmjs

logs:
  - {type: stdout, format: pretty, level: http}
listen: 0.0.0.0:4873  ////默认没有，只能在本机访问，添加后可以通过外网访问。

yarn global add @vue/cli
vue --version

Vue-cli3如何添加路由（router）
npm install vue-router
创建router.js与mian.js同级

router.js中的内容为
import Vue from 'vue'
import Router from 'vue-router'
 
//组件模块
import Main from './components/content/main'
import Header from './components/header/header'
import Admin from './components/admin/admin'
 
Vue.use(Router)
 
export default new Router({
  routes: [
    { path: '/', name: 'home', component: Main },
    { path: '/main', name: 'Main', component: Main },
    { path: '/header',  name: 'Header', component: Header},
    { path: '/admin',  name: 'Admin', component: Admin}
  ]
})

在main.js中添加如下内容
import router from './router'

new Vue({
  render: h => h(App),
  router, //here
}).$mount('#app')

接下里就可以开始使用路由了，在需要使用路由的地方加入以下内容

也可通过事件的方法来使用路由

methods:{
  toMain() {
    this.$router.push('./main');  //跳转到指定组件
  },
 
  //使用路由返回上一级
  goBack() {
    window.history.length > 1 ? this.$router.go(-1) : this.$router.push("/");
  },
}


安装vue-router
yarn add vue-router

在src文件夹下创建router文件夹，router文件夹里面创建index.js文件，index.js内容为：
src/router/index.js

import Vue from 'vue'
import Router from  'vue-router'
import App from '@/views/App.vue'

const requireAll = requireContext => requireContext.keys().map(requireContext)

const routerChildrenContext = require.context('@/views/', true, /router\.js$/)

Vue.use(Router)

let routes = []

let rootRouter = {
  path: '/',
  component: App,
  children: []
}

// 重定向路由
let redirectRoute = {
  path: '*',
  redirect: '/'
}

const routerChildren = requireAll(routerChildrenContext)

routerChildren.map((route) => {
  route.default(rootRouter.children)
})

let mode = 'history'

const relRoutes = routes.concat([rootRouter, redirectRoute])
export default new Router({
  mode: mode,
  routes: relRoutes
})


在main.js文件中引用上面的index.js文件
因为在src/router/index.js文件中已经引入App.vue 文件，在main.js中就不再引入渲染

src/main.js
import Vue from 'vue'
// import App from './App.vue'
import router from './router/index' // 引入

Vue.config.productionTip = false

new Vue({
  // render: h => h(App),
  router
}).$mount('#app')


4.引用组件
在src目录下新建views文件夹(存放前端页面组件)，已经存在的components我们存放elementUI组件和自定义的公用组件
在views文件夹下创建页面模块文件夹，这里是ceshi文件夹
ceshi文件夹下创建router.js文件和src文件夹
src文件下存放vue组件

src/views/ceshi/router.js

const A = () => import('./src/a.vue')
const B = () => import('./src/b.vue')

export default function (router) {
  router.push({
    path: '/a',
    name: 'a',
    component: A
  }, {
    path: '/b',
    name: 'b',
    component: B
  })
}

渲染路由组件
src/views/App.vue

<template>
  <div id="app">
    <img alt="Vue logo" src="@/assets/logo.png">
    <router-view/>
  </div>
</template>

<script>
export default {
  name: 'app'
}
</script>

<style>
#app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
将public/index.html文件中的<div id="app"><router-view></router-view></div>改为<div id="app"></div>


启动项目 发现有报错信息如下：
[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.
原因参考这边文章：https://blog.csdn.net/qq_35324453/article/details/80920344

#解决方案:
在项目根目录创建vue.config.js文件添加配置

方案一：

module.exports = {
  runtimeCompiler: true
}
方案二：

module.exports = {
  configureWebpack: {
    resolve: {
      alias: {
        'vue$': 'vue/dist/vue.esm.js'
      }
    }
  }
}
重启项目，打开 http://localhost:8080就可以切换路由展示不同页面啦

封装axios请求
#安装axios
yarn add axios

#引入axios并封装
src文件夹下创建config文件夹，config文件夹下创建axios.config.js和http.js文件
src/config/axios.config.js

import axios from 'axios'

const service = axios.create({
  timeout: 20000,
  withCredentials: true // 跨站点访问控制请求
})

/**
 * 请求配置
 * @see https://github.com/mzabriskie/axios
 */
service.interceptors.request.use(function (config) {
  return config
}, function (error) {
  // Do something with request error
  return Promise.reject(error)
})

service.interceptors.response.use(function (response) {
  let { data, status, statusText: err_msg } = response
  return { data, status, err_msg }
}, function (error) {
  // Do something with response error
  return Promise.reject(error)
})

export default service

src/config/http.js

import fetch from './axios.config'

const API_HOST = '/api'

// 基本配置
const DEFAULT_CONFIG ={
  isApiHost: true
}

const POST_HEADER = {
  headers: {
    'content-type': 'application/json'
  }
}

/**
 * get 提交
 * @param {String} url 请求的url
 * @param {any} params  请求的参数
 * @param {Obejct} config  请求配置
 * @returns Promise
 */
export function get(url, params = {}, config = {}) {
  let opts = {...DEFAULT_CONFIG, ...config}
  opts.params = {...params}
  return fetch.get(getUrl(url, opts.isApiHost), opts)
}

/**
 *
 * post 提交
 * @param {String} url 请求的url
 * @param {any} [params={}] 请求的参数
 * @param {any} isApiHost 请求配置
 * @returns Promise
 *
 * @memberOf HttpBase
 */
export function post(url, params = {}, config = {}) {
  let opts = {...DEFAULT_CONFIG, ...POST_HEADER, ...config}
  return fetch.post(getUrl(url, opts.isApiHost), params, opts)
}

/**
 *
 * delete 提交
 * @param {String} url 请求的url
 * @param {any} [params={}] 请求的参数
 * @returns Promise
 *
 * @memberOf HttpBase
 */
export function Delete(url, params = {}, config = {}) {
  let opts = {...DEFAULT_CONFIG, ...POST_HEADER, ...config}
  return fetch.delete(getUrl(url, opts.isApiHost), params, opts)
}

/**
 *
 * 上传
 * @export
 * @param {any} url 请求的url
 * @param {any} [params={}] 请求的参数
 * @param {any} [config={}] 配置
 * @returns Promise
 */
export function upload(url, params = {}, config = {}) {
  let opts = {...DEFAULT_CONFIG, ...POST_HEADER, ...config}
  let form = new FormData()
  Object.keys(params).forEach(key => {
    form.append(key, params[key])
  })
  return fetch.post(getUrl(url, opts.isApiHost), form, opts)
}

/**
 *
 * 下载
 * @export
 * @param {any} url 请求
 * @param {any} [params={}] 请求参数
 * @param {string} [type='post'] 请求类型
 * @param {any} [config={}] 配置
 */
export function download(url, params = {}, type = 'post', config = {}) {
  let opts = {...DEFAULT_CONFIG, ...POST_HEADER, ...config}
  let $form = document.createElement('form')
  $form.setAttribute('method', type)
  $form.setAttribute('hidden', 'hidden')
  $form.setAttribute('action', getUrl(url, opts.isApiHost))

  let createInput = (name, value) => {
    let input = document.createElement('input')
    input.setAttribute('type', 'hidden')
    input.setAttribute('name', name)
    input.setAttribute('value', value)

    $form.appendChild(input)
  }

  Object.keys(params).forEach(key => {
    createInput(key, params[key])
  })

  let $body = document.body || document.getElementsByTagName('body')[0]
  $body.append($form)
  $form.submit()
  $form.remove()
}

/**
 *
 * url 处理如果 isApiHost 为true 则添加 API_HOST
 * @param {any} url
 * @param {any} isApiHost
 * @returns
 *
 */
function getUrl(url, isApiHost) {
  if (!isApiHost) {
    return url
  }
  let arr = [API_HOST]
  arr.push(url)
  return arr.join('')
}
#调用接口
src文件夹下创建services文件夹，这里用来存放前端调用的接口，services文件夹下创建ceshi.service.js文件
src/services/ceshi.service.js

/info是我们在最初写的接口例子

import { get } from '@/config/http'

export function getInfoData () {
  return get('/info')
}
页面内调用接口
src/views/ceshi/src/a.vue

<template>
  <div>
    <div>aaaaaaaa</div>
    <button v-on:click="getInfo()">点击获取数据</button>
    {{infoList}}
  </div>
</template>
<script>
import { getInfoData } from '@/services/ceshi.service' // 引入接口
export default {
  data() {
    return {
      infoList: []
    }
  },
  methods: {
    async getInfo() {
      const result = await getInfoData()
      this.infoList = result
    }
  }
}
</script>
配置代理
上面我们前端启动的项目地址是http://localhost:8080, node启动的服务地址是http://localhost:3000

在项目根目录的vue.config.js文件中配置代理

vue.config.js

module.exports = {
  runtimeCompiler: true,
  // 配置代理
  devServer: {
    proxy: {
      '/api': {
        target: 'http://localhost:3000',
        changeOrigin: true,
        pathRewrite: {
          '^/api': ''
        }
      }
    }
  }
}
启动项目
前端：

yarn serve
后端：

node core/app.js

