背景：

      MySQL 5.5开始新增一个数据库：PERFORMANCE_SCHEMA，主要用于收集数据库服务器性能参数。并且库里表的存储引擎均为PERFORMANCE_SCHEMA，而用户是不能创建存储引擎为PERFORMANCE_SCHEMA的表。MySQL5.5默认是关闭的，需要手动开启，在配置文件里添加：

[mysqld]
performance_schema=ON
查看是否开启：

mysql>show variables like 'performance_schema';
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| performance_schema | ON    |
+--------------------+-------+
从MySQL5.6开始，默认打开，本文就从MySQL5.6来说明，在数据库使用当中PERFORMANCE_SCHEMA的一些比较常用的功能。具体的信息可以查看官方文档。

相关表信息：

一：配置（setup）表：

复制代码

zjy@performance_schema 10:16:56>show tables like '%setup%';
+----------------------------------------+
| Tables_in_performance_schema (%setup%) |
+----------------------------------------+
| setup_actors                           |
| setup_consumers                        |
| setup_instruments                      |
| setup_objects                          |
| setup_timers                           |
+----------------------------------------+
复制代码

1，setup_actors：配置用户纬度的监控，默认监控所有用户。

zjy@performance_schema 10:19:11>select * from setup_actors;
+------+------+------+
| HOST | USER | ROLE |
+------+------+------+
| %    | %    | %    |
+------+------+------+
2，setup_consumers：配置events的消费者类型，即收集的events写入到哪些统计表中。

复制代码

zjy@: performance_schema 10:23:35>select * from setup_consumers;
+--------------------------------+---------+
| NAME                           | ENABLED |
+--------------------------------+---------+
| events_stages_current          | NO      |
| events_stages_history          | NO      |
| events_stages_history_long     | NO      |
| events_statements_current      | YES     |
| events_statements_history      | NO      |
| events_statements_history_long | NO      |
| events_waits_current           | NO      |
| events_waits_history           | NO      |
| events_waits_history_long      | NO      |
| global_instrumentation         | YES     |
| thread_instrumentation         | YES     |
| statements_digest              | YES     |
+--------------------------------+---------+
复制代码

这里需要说明的是需要查看哪个就更新其ENABLED列为YES。如：

zjy@performance_schema 10:25:02>update setup_consumers set ENABLED='YES' where NAME in ('events_stages_current','events_waits_current');
Query OK, 2 rows affected (0.00 sec)
更新完后立即生效，但是服务器重启之后又会变回默认值，要永久生效需要在配置文件里添加：

复制代码

[mysqld]
#performance_schema
performance_schema_consumer_events_waits_current=on
performance_schema_consumer_events_stages_current=on
performance_schema_consumer_events_statements_current=on
performance_schema_consumer_events_waits_history=on
performance_schema_consumer_events_stages_history=on
performance_schema_consumer_events_statements_history=on
复制代码

即在这些表的前面加上：performance_schema_consumer_xxx。表setup_consumers里面的值有个层级关系：

global_instrumentation > thread_instrumentation = statements_digest > events_stages_current = events_statements_current = events_waits_current > events_stages_history = events_statements_history = events_waits_history > events_stages_history_long = events_statements_history_long = events_waits_history_long
只有上一层次的为YES，才会继续检查该本层为YES or NO。global_instrumentation是最高级别consumer，如果它设置为NO，则所有的consumer都会忽略。其中history和history_long存的是current表的历史记录条数，history表记录了每个线程最近等待的10个事件，而history_long表则记录了最近所有线程产生的10000个事件，这里的10和10000都是可以配置的。这三个表表结构相同，history和history_long表数据都来源于current表。长度通过控制参数：

复制代码

zjy@performance_schema 11:10:03>show variables like 'performance_schema%history%size';
+--------------------------------------------------------+-------+
| Variable_name                                          | Value |
+--------------------------------------------------------+-------+
| performance_schema_events_stages_history_long_size     | 10000 |
| performance_schema_events_stages_history_size          | 10    |
| performance_schema_events_statements_history_long_size | 10000 |
| performance_schema_events_statements_history_size      | 10    |
| performance_schema_events_waits_history_long_size      | 10000 |
| performance_schema_events_waits_history_size           | 10    |
+--------------------------------------------------------+-------+
复制代码

3，setup_instruments：配置具体的instrument，主要包含4大类：idle、stage/xxx、statement/xxx、wait/xxx：

复制代码

zjy@performance_schema 10:56:35>select name,count(*) from setup_instruments group by LEFT(name,5);
+---------------------------------+----------+
| name                            | count(*) |
+---------------------------------+----------+
| idle                            |        1 |
| stage/sql/After create          |      111 |
| statement/sql/select            |      179 |
| wait/synch/mutex/sql/PAGE::lock |      296 |
+---------------------------------+----------+
复制代码

idle表示socket空闲的时间，stage类表示语句的每个执行阶段的统计，statement类统计语句维度的信息，wait类统计各种等待事件，比如IO，mutux，spin_lock,condition等。

4，setup_objects：配置监控对象，默认对mysql，performance_schema和information_schema中的表都不监控，而其它DB的所有表都监控。

复制代码

zjy@performance_schema 11:00:18>select * from setup_objects;
+-------------+--------------------+-------------+---------+-------+
| OBJECT_TYPE | OBJECT_SCHEMA      | OBJECT_NAME | ENABLED | TIMED |
+-------------+--------------------+-------------+---------+-------+
| TABLE       | mysql              | %           | NO      | NO    |
| TABLE       | performance_schema | %           | NO      | NO    |
| TABLE       | information_schema | %           | NO      | NO    |
| TABLE       | %                  | %           | YES     | YES   |
+-------------+--------------------+-------------+---------+-------+
复制代码

5，setup_timers：配置每种类型指令的统计时间单位。MICROSECOND表示统计单位是微妙，CYCLE表示统计单位是时钟周期，时间度量与CPU的主频有关，NANOSECOND表示统计单位是纳秒。但无论采用哪种度量单位，最终统计表中统计的时间都会装换到皮秒。（1秒＝1000000000000皮秒）

复制代码

zjy@performance_schema 11:05:12>select * from setup_timers;
+-----------+-------------+
| NAME      | TIMER_NAME  |
+-----------+-------------+
| idle      | MICROSECOND |
| wait      | CYCLE       |
| stage     | NANOSECOND  |
| statement | NANOSECOND  |
+-----------+-------------+
复制代码

二：instance表

1，cond_instances：条件等待对象实例

表中记录了系统中使用的条件变量的对象，OBJECT_INSTANCE_BEGIN为对象的内存地址。

2，file_instances：文件实例

表中记录了系统中打开了文件的对象，包括ibdata文件，redo文件，binlog文件，用户的表文件等，open_count显示当前文件打开的数目，如果重来没有打开过，不会出现在表中。

复制代码

zjy@performance_schema 11:20:04>select * from file_instances limit 2,5;
+---------------------------------+--------------------------------------+------------+
| FILE_NAME                       | EVENT_NAME                           | OPEN_COUNT |
+---------------------------------+--------------------------------------+------------+
| /var/lib/mysql/mysql/plugin.frm | wait/io/file/sql/FRM                 |          0 |
| /var/lib/mysql/mysql/plugin.MYI | wait/io/file/myisam/kfile            |          1 |
| /var/lib/mysql/mysql/plugin.MYD | wait/io/file/myisam/dfile            |          1 |
| /var/lib/mysql/ibdata1          | wait/io/file/innodb/innodb_data_file |          2 |
| /var/lib/mysql/ib_logfile0      | wait/io/file/innodb/innodb_log_file  |          2 |
+---------------------------------+--------------------------------------+------------+
复制代码

3，mutex_instances：互斥同步对象实例

表中记录了系统中使用互斥量对象的所有记录，其中name为：wait/synch/mutex/*。LOCKED_BY_THREAD_ID显示哪个线程正持有mutex，若没有线程持有，则为NULL。

4，rwlock_instances： 读写锁同步对象实例

表中记录了系统中使用读写锁对象的所有记录，其中name为 wait/synch/rwlock/*。WRITE_LOCKED_BY_THREAD_ID为正在持有该对象的thread_id，若没有线程持有，则为NULL。READ_LOCKED_BY_COUNT为记录了同时有多少个读者持有读锁。（通过 events_waits_current 表可以知道，哪个线程在等待锁；通过rwlock_instances知道哪个线程持有锁。rwlock_instances的缺陷是，只能记录持有写锁的线程，对于读锁则无能为力）。

5，socket_instances：活跃会话对象实例
表中记录了thread_id,socket_id,ip和port，其它表可以通过thread_id与socket_instance进行关联，获取IP-PORT信息，能够与应用对接起来。
event_name主要包含3类：
wait/io/socket/sql/server_unix_socket，服务端unix监听socket
wait/io/socket/sql/server_tcpip_socket，服务端tcp监听socket
wait/io/socket/sql/client_connection，客户端socket

三：Wait表

1，events_waits_current：记录了当前线程等待的事件

2，events_waits_history：记录了每个线程最近等待的10个事件

3，events_waits_history_long：记录了最近所有线程产生的10000个事件

表结构定义如下：

复制代码

CREATE TABLE `events_waits_current` (
  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT '线程ID',
  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT '当前线程的事件ID，和THREAD_ID确定唯一',
  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT '当事件开始时，这一列被设置为NULL。当事件结束时，再更新为当前的事件ID',
  `EVENT_NAME` varchar(128) NOT NULL COMMENT '事件名称',
  `SOURCE` varchar(64) DEFAULT NULL COMMENT '该事件产生时的源码文件',
  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT '事件开始时间（皮秒）',
  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT '事件结束结束时间（皮秒）',
  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT '事件等待时间（皮秒）',
  `SPINS` int(10) unsigned DEFAULT NULL COMMENT '',
  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT '库名',
  `OBJECT_NAME` varchar(512) DEFAULT NULL COMMENT '文件名、表名、IP:SOCK值',
  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'FILE、TABLE、TEMPORARY TABLE',
  `INDEX_NAME` varchar(64) DEFAULT NULL COMMENT '索引名',
  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT '内存地址',
  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT '该事件对应的父事件ID',
  `NESTING_EVENT_TYPE` enum('STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT '父事件类型(STATEMENT, STAGE, WAIT)',
  `OPERATION` varchar(32) NOT NULL COMMENT '操作类型（lock, read, write）',
  `NUMBER_OF_BYTES` bigint(20) DEFAULT NULL COMMENT '',
  `FLAGS` int(10) unsigned DEFAULT NULL COMMENT '标记'
) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8
复制代码

四：Stage 表 

1，events_stages_current：记录了当前线程所处的执行阶段

2，events_stages_history：记录了当前线程所处的执行阶段10条历史记录

3，events_stages_history_long：记录了当前线程所处的执行阶段10000条历史记录

表结构定义如下：

复制代码

CREATE TABLE `events_stages_current` (
  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT '线程ID',
  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT '事件ID',
  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT '结束事件ID',
  `EVENT_NAME` varchar(128) NOT NULL COMMENT '事件名称',
  `SOURCE` varchar(64) DEFAULT NULL COMMENT '源码位置',
  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT '事件开始时间（皮秒）',
  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT '事件结束结束时间（皮秒）',
  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT '事件等待时间（皮秒）',
  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT '该事件对应的父事件ID',
  `NESTING_EVENT_TYPE` enum('STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT '父事件类型(STATEMENT, STAGE, WAIT)'
) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8
复制代码

五：Statement 表

1，events_statements_current：通过 thread_id+event_id可以唯一确定一条记录。Statments表只记录最顶层的请求，SQL语句或是COMMAND，每条语句一行。event_name形式为statement/sql/*，或statement/com/*

2，events_statements_history

3，events_statements_history_long

表结构定义如下：

复制代码

CREATE TABLE `events_statements_current` (
  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT '线程ID',
  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT '事件ID',
  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT '结束事件ID',
  `EVENT_NAME` varchar(128) NOT NULL COMMENT '事件名称',
  `SOURCE` varchar(64) DEFAULT NULL COMMENT '源码位置',
  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT '事件开始时间（皮秒）',
  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT '事件结束结束时间（皮秒）',
  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT '事件等待时间（皮秒）',
  `LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT '锁时间',
  `SQL_TEXT` longtext COMMENT '记录SQL语句',
  `DIGEST` varchar(32) DEFAULT NULL COMMENT '对SQL_TEXT做MD5产生的32位字符串',
  `DIGEST_TEXT` longtext COMMENT '将语句中值部分用问号代替，用于SQL语句归类',
  `CURRENT_SCHEMA` varchar(64) DEFAULT NULL COMMENT '默认的数据库名',
  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT '保留字段',
  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT '保留字段',
  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT '保留字段',
  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned DEFAULT NULL COMMENT '内存地址',
  `MYSQL_ERRNO` int(11) DEFAULT NULL COMMENT '',
  `RETURNED_SQLSTATE` varchar(5) DEFAULT NULL COMMENT '',
  `MESSAGE_TEXT` varchar(128) DEFAULT NULL COMMENT '信息',
  `ERRORS` bigint(20) unsigned NOT NULL COMMENT '错误数目',
  `WARNINGS` bigint(20) unsigned NOT NULL COMMENT '警告数目',
  `ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT '影响的数目',
  `ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT '返回的记录数',
  `ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT '读取扫描的记录数目',
  `CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT '创建磁盘临时表数目',
  `CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT '创建临时表数目',
  `SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'join时，第一个表为全表扫描的数目',
  `SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT '引用表采用range方式扫描的数目',
  `SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'join时，第一个表采用range方式扫描的数目',
  `SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT '',
  `SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'join时，第一个表位全表扫描的数目',
  `SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT '',
  `SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT '范围排序数目',
  `SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT '排序的记录数目',
  `SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT '全表排序数目',
  `NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '没有使用索引数目',
  `NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '',
  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT '该事件对应的父事件ID',
  `NESTING_EVENT_TYPE` enum('STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT '父事件类型(STATEMENT, STAGE, WAIT)'
) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8
复制代码

六：Connection 表

1，users：记录用户连接数信息

2，hosts：记录了主机连接数信息

3，accounts：记录了用户主机连接数信息

 View Code

七：Summary 表： Summary表聚集了各个维度的统计信息包括表维度，索引维度，会话维度，语句维度和锁维度的统计信息

1，events_waits_summary_global_by_event_name：按等待事件类型聚合，每个事件一条记录

复制代码

CREATE TABLE `events_waits_summary_global_by_event_name` (
  `EVENT_NAME` varchar(128) NOT NULL COMMENT '事件名称',
  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT '事件计数',
  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '总的等待时间',
  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '最小等待时间',
  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '平均等待时间',
  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '最大等待时间'
) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8
复制代码

2，events_waits_summary_by_instance：按等待事件对象聚合，同一种等待事件，可能有多个实例，每个实例有不同的内存地址，因此
event_name+object_instance_begin唯一确定一条记录。

复制代码

CREATE TABLE `events_waits_summary_by_instance` (
  `EVENT_NAME` varchar(128) NOT NULL COMMENT '事件名称',
  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT '内存地址',
  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT '事件计数',
  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '总的等待时间',
  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '最小等待时间',
  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '平均等待时间',
  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '最大等待时间'
) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8
复制代码

3，events_waits_summary_by_thread_by_event_name：按每个线程和事件来统计，thread_id+event_name唯一确定一条记录。

复制代码

CREATE TABLE `events_waits_summary_by_thread_by_event_name` (
  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT '线程ID',
  `EVENT_NAME` varchar(128) NOT NULL COMMENT '事件名称',
  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT '事件计数',
  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '总的等待时间',
  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '最小等待时间',
  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '平均等待时间',
  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '最大等待时间'
) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8
复制代码

4，events_stages_summary_global_by_event_name：按事件阶段类型聚合，每个事件一条记录，表结构同上。

5，events_stages_summary_by_thread_by_event_name：按每个线程和事件来阶段统计，表结构同上。

6，events_statements_summary_by_digest：按照事件的语句进行聚合。

复制代码

CREATE TABLE `events_statements_summary_by_digest` (
  `SCHEMA_NAME` varchar(64) DEFAULT NULL COMMENT '库名',
  `DIGEST` varchar(32) DEFAULT NULL COMMENT '对SQL_TEXT做MD5产生的32位字符串。如果为consumer表中没有打开statement_digest选项，则为NULL',
  `DIGEST_TEXT` longtext COMMENT '将语句中值部分用问号代替，用于SQL语句归类。如果为consumer表中没有打开statement_digest选项，则为NULL。',
  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT '事件计数',
  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '总的等待时间',
  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '最小等待时间',
  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '平均等待时间',
  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT '最大等待时间',
  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT '锁时间总时长',
  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT '错误数的总',
  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT '警告的总数',
  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT '影响的总数目',
  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT '返回总数目',
  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT '总的扫描的数目',
  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT '创建磁盘临时表的总数目',
  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT '创建临时表的总数目',
  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT '第一个表全表扫描的总数目',
  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT '总的采用range方式扫描的数目',
  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT '第一个表采用range方式扫描的总数目',
  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT '',
  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT '第一个表位全表扫描的总数目',
  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT '',
  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT '范围排序总数',
  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT '排序的记录总数目',
  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT '第一个表排序扫描总数目',
  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '没有使用索引总数',
  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '',
  `FIRST_SEEN` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '第一次执行时间',
  `LAST_SEEN` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '最后一次执行时间'
) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8
复制代码

7，events_statements_summary_global_by_event_name：按照事件的语句进行聚合。表结构同上。

8，events_statements_summary_by_thread_by_event_name：按照线程和事件的语句进行聚合，表结构同上。

9，file_summary_by_instance：按事件类型统计（物理IO维度）

10，file_summary_by_event_name：具体文件统计（物理IO维度）

9和10一起说明：

统计IO操作：COUNT_STAR，SUM_TIMER_WAIT,MIN_TIMER_WAIT,AVG_TIMER_WAIT,MAX_TIMER_WAIT

统计读      ：COUNT_READ,SUM_TIMER_READ,MIN_TIMER_READ,AVG_TIMER_READ,MAX_TIMER_READ, SUM_NUMBER_OF_BYTES_READ

统计写      ：COUNT_WRITE,SUM_TIMER_WRITE,MIN_TIMER_WRITE,AVG_TIMER_WRITE,MAX_TIMER_WRITE, SUM_NUMBER_OF_BYTES_WRITE

统计其他IO事件，比如create，delete，open，close等：COUNT_MISC,SUM_TIMER_MISC,MIN_TIMER_MISC,AVG_TIMER_MISC,MAX_TIMER_MISC

11，table_io_waits_summary_by_table：根据wait/io/table/sql/handler，聚合每个表的I/O操作（逻辑IO纬度）

统计IO操作：COUNT_STAR,SUM_TIMER_WAIT,MIN_TIMER_WAIT,AVG_TIMER_WAIT,MAX_TIMER_WAIT 

统计读      ：COUNT_READ,SUM_TIMER_READ,MIN_TIMER_READ,AVG_TIMER_READ,MAX_TIMER_READ

              ：COUNT_FETCH,SUM_TIMER_FETCH,MIN_TIMER_FETCH,AVG_TIMER_FETCH, MAX_TIMER_FETCH

统计写      ：COUNT_WRITE,SUM_TIMER_WRITE,MIN_TIMER_WRITE,AVG_TIMER_WRITE,MAX_TIMER_WRITE

INSERT统计，相应的还有DELETE和UPDATE统计：COUNT_INSERT,SUM_TIMER_INSERT,MIN_TIMER_INSERT,AVG_TIMER_INSERT,MAX_TIMER_INSERT

12，table_io_waits_summary_by_index_usage：与table_io_waits_summary_by_table类似，按索引维度统计

13，table_lock_waits_summary_by_table：聚合了表锁等待事件，包括internal lock 和 external lock

internal lock通过SQL层函数thr_lock调用，OPERATION值为：
read normal、read with shared locks、read high priority、read no insert、write allow write、write concurrent insert、write delayed、write low priority、write normal
external lock则通过接口函数handler::external_lock调用存储引擎层，OPERATION列的值为：read external、write external

14，Connection Summaries表：account、user、host

events_waits_summary_by_account_by_event_name
events_waits_summary_by_user_by_event_name
events_waits_summary_by_host_by_event_name 
events_stages_summary_by_account_by_event_name
events_stages_summary_by_user_by_event_name
events_stages_summary_by_host_by_event_name 
events_statements_summary_by_account_by_event_name
events_statements_summary_by_user_by_event_name
events_statements_summary_by_host_by_event_name

15，socket_summary_by_instance、socket_summary_by_event_name：socket聚合统计表。

八：其他相关表

1，performance_timers：系统支持的统计时间单位

2，threads：监视服务端的当前运行的线程

统计应用：

      关于SQL维度的统计信息主要集中在events_statements_summary_by_digest表中，通过将SQL语句抽象出digest，可以统计某类SQL语句在各个维度的统计信息

1，哪个SQL执行最多：

复制代码

zjy@performance_schema 11:36:22>SELECT SCHEMA_NAME,DIGEST_TEXT,COUNT_STAR,SUM_ROWS_SENT,SUM_ROWS_EXAMINED,FIRST_SEEN,LAST_SEEN FROM events_statements_summary_by_digest ORDER BY COUNT_STAR desc LIMIT 1\G
*************************** 1. row ***************************
      SCHEMA_NAME: dchat
      DIGEST_TEXT: SELECT ...
       COUNT_STAR: 1161210102
    SUM_ROWS_SENT: 1161207842
SUM_ROWS_EXAMINED: 0
       FIRST_SEEN: 2016-02-17 00:36:46
        LAST_SEEN: 2016-03-07 11:36:29
复制代码

各个字段的注释可以看上面的表结构说明：从2月17号到3月7号该SQL执行了1161210102次。

2，哪个SQL平均响应时间最多：

复制代码

zjy@performance_schema 11:36:28>SELECT SCHEMA_NAME,DIGEST_TEXT,COUNT_STAR,AVG_TIMER_WAIT,SUM_ROWS_SENT,SUM_ROWS_EXAMINED,FIRST_SEEN,LAST_SEEN FROM events_statements_summary_by_digest ORDER BY AVG_TIMER_WAIT desc LIMIT 1\G
*************************** 1. row ***************************
      SCHEMA_NAME: dchat
      DIGEST_TEXT: SELECT ...
       COUNT_STAR: 1
   AVG_TIMER_WAIT: 273238183964000
    SUM_ROWS_SENT: 50208
SUM_ROWS_EXAMINED: 5565651
       FIRST_SEEN: 2016-02-22 13:27:33
        LAST_SEEN: 2016-02-22 13:27:33
复制代码

各个字段的注释可以看上面的表结构说明：从2月17号到3月7号该SQL平均响应时间273238183964000皮秒（1000000000000皮秒=1秒）

3，哪个SQL扫描的行数最多：

SUM_ROWS_EXAMINED

4，哪个SQL使用的临时表最多：

SUM_CREATED_TMP_DISK_TABLES、SUM_CREATED_TMP_TABLES

5，哪个SQL返回的结果集最多：

SUM_ROWS_SENT

6，哪个SQL排序数最多：

SUM_SORT_ROWS

通过上述指标我们可以间接获得某类SQL的逻辑IO(SUM_ROWS_EXAMINED)，CPU消耗(SUM_SORT_ROWS)，网络带宽(SUM_ROWS_SENT)的对比。

通过file_summary_by_instance表，可以获得系统运行到现在，哪个文件(表)物理IO最多，这可能意味着这个表经常需要访问磁盘IO。

7，哪个表、文件逻辑IO最多（热数据）：

复制代码

zjy@performance_schema 12:16:18>SELECT FILE_NAME,EVENT_NAME,COUNT_READ,SUM_NUMBER_OF_BYTES_READ,COUNT_WRITE,SUM_NUMBER_OF_BYTES_WRITE FROM file_summary_by_instance ORDER BY SUM_NUMBER_OF_BYTES_READ+SUM_NUMBER_OF_BYTES_WRITE DESC LIMIT 2\G
*************************** 1. row ***************************
                FILE_NAME: /var/lib/mysql/ibdata1  #文件
               EVENT_NAME: wait/io/file/innodb/innodb_data_file
               COUNT_READ: 544
 SUM_NUMBER_OF_BYTES_READ: 10977280
              COUNT_WRITE: 3700729
SUM_NUMBER_OF_BYTES_WRITE: 1433734217728
*************************** 2. row ***************************
                FILE_NAME: /var/lib/mysql/dchat/fans.ibd   #表
               EVENT_NAME: wait/io/file/innodb/innodb_data_file
               COUNT_READ: 9370680
 SUM_NUMBER_OF_BYTES_READ: 153529188352
              COUNT_WRITE: 67576376
SUM_NUMBER_OF_BYTES_WRITE: 1107815432192
复制代码

8，哪个索引使用最多：

复制代码

zjy@performance_schema 12:18:42>SELECT OBJECT_NAME, INDEX_NAME, COUNT_FETCH, COUNT_INSERT, COUNT_UPDATE, COUNT_DELETE FROM table_io_waits_summary_by_index_usage ORDER BY SUM_TIMER_WAIT DESC limit 1;
+-------------+------------+-------------+--------------+--------------+--------------+
| OBJECT_NAME | INDEX_NAME | COUNT_FETCH | COUNT_INSERT | COUNT_UPDATE | COUNT_DELETE |
+-------------+------------+-------------+--------------+--------------+--------------+
| fans        | PRIMARY    | 29002695158 |            0 |    296373434 |            0 |
+-------------+------------+-------------+--------------+--------------+--------------+
1 row in set (0.29 sec)
复制代码

通过table_io_waits_summary_by_index_usage表，可以获得系统运行到现在，哪个表的具体哪个索引(包括主键索引，二级索引)使用最多。

9，哪个索引没有使用过：

zjy@performance_schema 12:23:22>SELECT OBJECT_SCHEMA, OBJECT_NAME, INDEX_NAME FROM table_io_waits_summary_by_index_usage WHERE INDEX_NAME IS NOT NULL AND COUNT_STAR = 0 AND OBJECT_SCHEMA <> 'mysql' ORDER BY OBJECT_SCHEMA,OBJECT_NAME;
10，哪个等待事件消耗的时间最多：

zjy@performance_schema 12:25:22>SELECT EVENT_NAME, COUNT_STAR, SUM_TIMER_WAIT, AVG_TIMER_WAIT FROM events_waits_summary_global_by_event_name WHERE event_name != 'idle' ORDER BY SUM_TIMER_WAIT DESC LIMIT 1;
11，类似profiling功能：

分析具体某条SQL，该SQL在执行各个阶段的时间消耗，通过events_statements_xxx表和events_stages_xxx表，就可以达到目的。两个表通过event_id与nesting_event_id关联，stages表的nesting_event_id为对应statements表的event_id；针对每个stage可能出现的锁等待，一个stage会对应一个或多个wait，通过stage_xxx表的event_id字段与waits_xxx表的nesting_event_id进行关联。如：

 View Code

总结：

本文通过对Performance Schema数据库的介绍，主要用于收集数据库服务器性能参数：①提供进程等待的详细信息，包括锁、互斥变量、文件信息；②保存历史的事件汇总信息，为提供MySQL服务器性能做出详细的判断；③对于新增和删除监控事件点都非常容易，并可以改变mysql服务器的监控周期，例如（CYCLE、MICROSECOND）。通过该库得到数据库运行的统计信息，更好分析定位问题和完善监控信息。类似的监控还有：

复制代码

打开标准的innodb监控：
CREATE TABLE innodb_monitor (a INT) ENGINE=INNODB;
打开innodb的锁监控：
CREATE TABLE innodb_lock_monitor (a INT) ENGINE=INNODB;
打开innodb表空间监控：
CREATE TABLE innodb_tablespace_monitor (a INT) ENGINE=INNODB;
打开innodb表监控：
CREATE TABLE innodb_table_monitor (a INT) ENGINE=INNODB;