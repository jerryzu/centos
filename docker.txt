https://hub.docker.com/ jerryzu

git clone https://github.com/docker/doodle.git
cd doodle\cheers2019 ;
docker build -t jerryzu/cheers2019 .
docker run -it --rm jerryzu/cheers2019
docker login ;
docker push jerryzu/cheers2019

docker run hello-world
docker pull centos:7
docker images
docker container ls
docker stop  c6e292dfb5b3
docker run -tid --net=host --name centos7  5e35e350aded  bash
docker exec -ti 0c8fc999 bash

docker run -v c:\Sites\redmine-3.4.5\config\routes.rb:/usr/src/redmine/config/routes.rb -v c:\Sites\redmine-3.4.5\app:/usr/src/redmine/app  -d -p 8088:3000 --name myredmine --link mymysql:mysql redmine:3.4.5

docker run --rm -v c:/Users:/data alpine ls /data


docker pull jenkins

docker run -d -p 8002:8080 -v ~/jenkins:/var/jenkins_home --name jenkins --restart=always jenkins

查看容器日志

docker logs -f jenkins

查看容器运行

docker ps



镜像

docker pull jenkinsci/jenkins

启动

docker run -d -p 8002:8080 -m 1024m -v ~/jenkins:/var/jenkins_home --name jenkins --restart=always jenkinsci/jenkins

日志

docker logs -f jenkins

jenkis 绑定gitlab

docker run -d -p 8002:8080 -m 1024m -v ~/jenkins:/var/jenkins_home --name jenkins --restart=always --link gitlab:gitlab.yiyuery.com jenkinsci/jenkins

=========================================
# 定义变量
API_NAME="msa-api-hello"
API_VERSION="0.0.1"
API_PORT="8101"
IMAGE_NAME="127.0.0.1:5000/com.msa/$API_NAME:$BUILD_NUMBER"
CONTAINER_NAME=$API_NAME-$API_VERSION

# 进入target目录并复制Dockerfile文件
cd $WORKSPACE/target
cp classes/Dockerfile .

# 构建Docker镜像
docker build -t $IMAGE_NAME .

# 推送Docker镜像
docker push $IMAGE_NAME

# 删除Docker容器
cid=$(docker ps | grep $CONTAINER_NAME |awk '{print $1}')
if [ x"$cid" != x ]
    then
    docker rm -f $cid
fi

# 启动Docker容器
docker run -d -p $API_PORT:8080 --name $CONTAINER_NAME $IMAGE_NAME

# 删除Dockerfile文件
rm -f Dockerfile

======================================
Docker搭建SVN服务器
宿主机数据文件夹准备
新建文件夹/opt/data/svn/repo，并给docker用户赋读写执行等权限
[docker@promote ~]$ mkdir /opt/data/svn/repo
安装svn服务
搜索svn镜像
[docker@promote ~]$ docker search svn
这里我们取docker.io/garethflowers/svn-server这个镜像
[docker@promote ~]$ docker pull docker.io/garethflowers/svn-server
查看镜像
[docker@promote ~]$ docker images
运行容器
docker run -v /opt/data/svn/repo:/var/opt/svn --name svn-server -p 3690:3690 -e SVN_REPONAME=repository -d svn_configed
进入到容器中进行配置
[docker@promote ~]$ docker exec -it 64c26480276d /bin/sh
创建资源库
/var/opt/svn # svnadmin create /var/opt/svn/repository
资源库配置
/var/opt/svn/repository/conf # vi svnserve.conf

编辑密码文件
/var/opt/svn/repository/conf # vi passwd
新增
修改鉴权文件
退出容器
exit
将容器内生成的资源库repository拷贝到宿主机的对应目录下，因为容器一旦重启，这些信息就会丢失，所以应该持久化到宿主机的文件系统中。
docker cp 容器ID:/var/opt/svn/repository/ /opt/data/svn/repo
重启容器
[docker@promote repo]$ docker restart svn-server

在客户端新增文件
验证正常
将容器删除后再重启，测试文件是否存在，验证重启过后，文件正常
中间遇见的问题
容器内无写权限到宿主机映射过来的文件问题
问题的原因是因为：SeLinux做了安全限制
解决方案如下
1. 在启动容器的时候加上如下参数 --privileged=true
2. 临时关闭SeLinux  sudo setinforce 0
3. 添加selinux规则，改变要挂载的目录的安全性文本 （chcon）


docker run -d -v D:\work\svn\tpedw:/var/tpedw --name svn --restart=always centos:7

docker container ls

docker exec -it centos7 /bin/bash

yum install openssh-clients.x86_64

docker commit c6e292dfb5b3 console:v0.1

docker run -d -v D:\work\svn\tpedw:/var/tpedw --name console --restart=always console:v0.1