创建一个父maven工程
　　新建一个maven项目，选择存储位置，并选择创建一个简单的maven工程
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.tpstic</groupId>
	<artifactId>aml</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>
</project>
创建子模块
　　右击父工程名---》New---》Project，然后选择新建一个maven module工程
　　设置子工程名以及父工程，再设置快速创建模式
=============================================================================

 1 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 2     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
 3     <modelVersion>4.0.0</modelVersion>
 4     <groupId>com.hd</groupId>
 5     <artifactId>test-hd-parent</artifactId>
 6     <version>0.0.1-SNAPSHOT</version>
 7     <packaging>pom</packaging>
 8     <modules>
 9         <module>test-hd-api</module>
10         <module>test-hd-service</module>
11         <module>test-hd-resource</module>
12         <module>test-hd-foundation</module>
13         <module>test-hd-modules</module>
14     </modules>
15 
16 
17     <!-- maven依赖 -->
18     <dependencyManagement>
19 
20         <dependencies>
21             <!-- hd -->
22             <dependency>
23                 <groupId>com.hd</groupId>
24                 <artifactId>test-hd-api</artifactId>
25                 <version>0.0.1-SNAPSHOT</version>
26             </dependency>
27 
28             <dependency>
29                 <groupId>com.hd</groupId>
30                 <artifactId>test-hd-service</artifactId>
31                 <version>0.0.1-SNAPSHOT</version>
32             </dependency>
33 
34             <dependency>
35                 <groupId>com.hd</groupId>
36                 <artifactId>test-hd-resource</artifactId>
37                 <version>0.0.1-SNAPSHOT</version>
38             </dependency>
39 
40             <dependency>
41                 <groupId>com.hd</groupId>
42                 <artifactId>test-hd-foundation</artifactId>
43                 <version>0.0.1-SNAPSHOT</version>
44             </dependency>
45 
46             <!-- Servlet -->
47             <dependency>
48                 <groupId>javax.servlet</groupId>
49                 <artifactId>javax.servlet-api</artifactId>
50                 <version>3.0.1</version>
51                 <scope>provided</scope>
52             </dependency>
53             <dependency>
54                 <groupId>javax.servlet.jsp</groupId>
55                 <artifactId>jsp-api</artifactId>
56                 <version>2.2</version>
57                 <scope>provided</scope>
58             </dependency>
59 
60             <!-- jstl -->
61             <dependency>
62                 <groupId>javax.servlet</groupId>
63                 <artifactId>jstl</artifactId>
64                 <version>1.2</version>
65             </dependency>
66 
67             <dependency>
68                 <groupId>taglibs</groupId>
69                 <artifactId>standard</artifactId>
70                 <version>1.1.2</version>
71             </dependency>
72 
73             <dependency>
74                 <groupId>junit</groupId>
75                 <artifactId>junit</artifactId>
76                 <version>3.8.1</version>
77                 <scope>test</scope>
78             </dependency>
79 
80         </dependencies>
81     </dependencyManagement>
82 
83 </project>


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 <?xml version="1.0"?>
 2 <project
 3     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
 4     xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 5     <modelVersion>4.0.0</modelVersion>
 6     <parent>
 7         <groupId>com.hd</groupId>
 8         <artifactId>test-hd-parent</artifactId>
 9         <version>0.0.1-SNAPSHOT</version>
10     </parent>
11     <artifactId>test-hd-foundation</artifactId>
12 
13     <dependencies>
14 
15         <!-- servlet -->
16         <dependency>
17             <groupId>javax.servlet</groupId>
18             <artifactId>jstl</artifactId>
19         </dependency>
20 
21         <dependency>
22             <groupId>taglibs</groupId>
23             <artifactId>standard</artifactId>
24         </dependency>
25 
26         <dependency>
27             <groupId>junit</groupId>
28             <artifactId>junit</artifactId>
29         </dependency>
30     </dependencies>
31 
32     <build>
33         <plugins>
34             <!-- define the project compile level -->
35             <plugin>
36                 <groupId>org.apache.maven.plugins</groupId>
37                 <artifactId>maven-compiler-plugin</artifactId>
38                 <version>2.3.2</version>
39                 <configuration>
40                     <source>1.7</source>
41                     <target>1.7</target>
42                 </configuration>
43             </plugin>
44         </plugins>
45     </build>
46 </project>

test-hd-module中的依赖关系
复制代码

 1 <?xml version="1.0" encoding="UTF-8"?>
 2 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
 4     <modelVersion>4.0.0</modelVersion>
 5     <parent>
 6         <groupId>com.hd</groupId>
 7         <artifactId>test-hd-parent</artifactId>
 8         <version>0.0.1-SNAPSHOT</version>
 9     </parent>
10 
11     <artifactId>test-hd-modules</artifactId>
12     <packaging>pom</packaging>
13 
14     <modules>
15         <module>test-hd-www</module>
16         <module>test-hd-admin</module>
17     </modules>
18 
19     <dependencies>
20 
21         <dependency>
22             <groupId>com.hd</groupId>
23             <artifactId>test-hd-foundation</artifactId>
24         </dependency>
25 
26         <dependency>
27             <groupId>com.hd</groupId>
28             <artifactId>test-hd-service</artifactId>
29         </dependency>
30         <dependency>
31             <groupId>com.hd</groupId>
32             <artifactId>test-hd-api</artifactId>
33         </dependency>
34 
35         <dependency>
36             <groupId>com.hd</groupId>
37             <artifactId>test-hd-resource</artifactId>
38         </dependency>
39 
40         <!-- servlet -->
41         <dependency>
42             <groupId>javax.servlet</groupId>
43             <artifactId>jstl</artifactId>
44         </dependency>
45 
46         <dependency>
47             <groupId>taglibs</groupId>
48             <artifactId>standard</artifactId>
49         </dependency>
50 
51         <dependency>
52             <groupId>junit</groupId>
53             <artifactId>junit</artifactId>
54         </dependency>
55 
56     </dependencies>
57 </project>
复制代码

 

    test-hd-www中的依赖关系
复制代码

 1 <?xml version="1.0"?>
 2 <project
 3     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
 4     xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 5     <modelVersion>4.0.0</modelVersion>
 6     <parent>
 7         <groupId>com.hd</groupId>
 8         <artifactId>test-hd-modules</artifactId>
 9         <version>0.0.1-SNAPSHOT</version>
10     </parent>
11     <artifactId>test-hd-www</artifactId>
12     <packaging>war</packaging>
13 
14     <build>
15         <plugins>
16             <!-- define the project compile level -->
17             <plugin>
18                 <groupId>org.apache.maven.plugins</groupId>
19                 <artifactId>maven-compiler-plugin</artifactId>
20                 <version>2.3.2</version>
21                 <configuration>
22                     <source>1.7</source>
23                     <target>1.7</target>
24                 </configuration>
25             </plugin>
26         </plugins>
27         <finalName>test-hd-www</finalName>
28     </build>
29 
30 </project>

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
使用Maven进行多模块拆分
模块拆分是Maven经常使用的功能，简单梳理一下如何使用Maven进行多模块拆分，

只做归纳总结，网上资料很多，不再一步一步实际创建和部署。

建立Maven多模块项目
一个简单的Java Web项目，Maven模块结构是这样的：

上述示意图中，有一个父项目(parent)聚合很多子项目（mytest-controller，mytest-util， mytest-dao， mytest-service， mytest-web）。每个项目，不管是父子，都含有一个pom.xml文件。而且要注意的是，小括号中标出了每个项目的打包类型。父项目是pom,也只能是pom。子项目有jar，或者war。根据它包含的内容具体考虑。

父项目声明打包类型等：

<groupId>my.test</groupId>
<artifactId>mytest-parent</artifactId>
<version>1.0</version>
<packaging>pom</packaging>

声明各个子模块：

<modules>
        <module>mytest-controller</module>
        <module>mytest-service</module>
        <module>mytest-util</module>
        <module>mytest-dao</module>
        <module>mytest-web-1</module>
        <module>mytest-web-2</module>
</modules>
 

然后在子模块中，声明父工程，子模块中代码如下：

<parent>
        <groupId>my.test</groupId>
        <artifactId>mytest-util</artifactId>
        <version>1.0</version>
</parent>
一般来说，项目中需要的外部依赖等都在父项目中引入，这样在子项目中省去了不必要的配置。

另外，各个子项目间的依赖在单独的pom.xml中配置，
比如mytest-web项目依赖控制层的mytest-controller，那么就在依赖中单独配置：

<dependency>
            <groupId>my.test<</groupId>
            <artifactId>mytest-controller</artifactId>
            <version>1.0</version>
</dependency>
这就需要在项目拆分和架构之前需要理清各个模块间的依赖关系。

在最后的Web模块如何打包
如果是单个War项目，使用普通的构建方式即可，需要注意的是如果项目中包含多个war的子模块，

需要使用maven的maven-war-plugin插件的overlays属性来处理，最终主web项目pom.

<build>
        <finalName>xhcms</finalName>
        <plugins>
            <!-- 合并多个war --> 
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <overlays>
                        <overlay>
                            <groupId>my.test</groupId>
                            <artifactId>my-test-web-1</artifactId>
                            <excludes>
                                <exclude>WEB-INF/web.xml</exclude>
                            </excludes>
                            <!-- 目标路径 -->
                            <targetPath>test</targetPath>
                        </overlay>
                    </overlays>
                </configuration>
            </plugin>
        </plugins>
    </build>

=============================================================================

1，先安装，很简单，在父pom文件中加入如下代码：

复制代码
<build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.7</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.7</version>
            </plugin>
        </plugins>
    </build>
复制代码
2. 比如上面这个问题，我们可以直接运行一条maven指令：

mvn -N versions:update-child-modules  //更新所有的子模块继承的父模块版本号
就可以把所有继承的子模块更新为和父模块一致了。

3.还有很多好用的功能，

 3.1我们开发的版本一般用SNAPSHOT版本，线上版本用RELEASE版本，一般SNAPSHOT 没有自定义或手动deploy的话，deploy的频率是一天一次。

 为了防止你项目中依赖的SNAPSHOT版本的代码因为团队其他同事的deploy操作而变得不可用，可以先用

mvn versions:lock-snapshots 
锁住当前项目中的snapshot依赖包，开发完成之后再用

mvn versions:unlock-snapshots
解锁。

3.2 下面这个命令很有用，可以设置整个项目的版本号，在你需要设置新版本号，可以全局更新项目版本号。一般开发环境就设置成SNAPHSHOT版本，测试测完之后没问题设置成Release版。

mvn versions:set -DnewVersion=1.0.1-SNAPSHOT //更新整个项目版本
